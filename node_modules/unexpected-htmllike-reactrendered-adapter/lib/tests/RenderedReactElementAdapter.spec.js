'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

require('../testHelpers/emulateDom');

var _RenderedReactElementAdapter = require('../RenderedReactElementAdapter');

var _RenderedReactElementAdapter2 = _interopRequireDefault(_RenderedReactElementAdapter);

var _reactRenderHook = require('react-render-hook');

var _reactRenderHook2 = _interopRequireDefault(_reactRenderHook);

var _unexpected = require('unexpected');

var _unexpected2 = _interopRequireDefault(_unexpected);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDomTestUtils = require('react-dom/test-utils');

var _reactDomTestUtils2 = _interopRequireDefault(_reactDomTestUtils);

var expect = _unexpected2['default'].clone();

var Simple = (function (_React$Component) {
    _inherits(Simple, _React$Component);

    function Simple() {
        _classCallCheck(this, Simple);

        _get(Object.getPrototypeOf(Simple.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(Simple, [{
        key: 'render',
        value: function render() {
            return _react2['default'].createElement(
                'span',
                { id: this.props.id },
                this.props.text
            );
        }
    }]);

    return Simple;
})(_react2['default'].Component);

;

var TestComponent = (function (_React$Component2) {
    _inherits(TestComponent, _React$Component2);

    function TestComponent() {
        _classCallCheck(this, TestComponent);

        _get(Object.getPrototypeOf(TestComponent.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(TestComponent, [{
        key: 'render',
        value: function render() {
            return _react2['default'].createElement(
                'div',
                { className: 'test' },
                _react2['default'].createElement(Simple, { id: '1', text: 'one' }),
                _react2['default'].createElement(Simple, { id: '2', text: 'two' })
            );
        }
    }]);

    return TestComponent;
})(_react2['default'].Component);

describe('RenderedReactElementadapter', function () {

    var component = undefined;
    var adapter = undefined;
    beforeEach(function () {

        adapter = new _RenderedReactElementAdapter2['default']();
        var renderedComponent = _reactDomTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(TestComponent, { className: 'foo' }));

        component = _reactRenderHook2['default'].findComponent(renderedComponent);
    });

    it('finds the name of the rendered component', function () {
        expect(adapter.getName(component), 'to equal', 'TestComponent');
    });

    it('finds the div child of the top level component', function () {
        expect(adapter.getChildren(component), 'to have length', 1);
    });

    it('finds the attributes of the top level component', function () {

        expect(adapter.getAttributes(component), 'to equal', {
            className: 'foo'
        });
    });

    describe("component's children", function () {
        var children = undefined;

        beforeEach(function () {

            children = adapter.getChildren(component);
        });

        it('finds the name of the native child element of the main component', function () {
            expect(adapter.getName(children[0]), 'to equal', 'div');
        });

        it('finds the children of the native child element of the main component', function () {
            expect(adapter.getChildren(children[0]), 'to have length', 2);
        });

        describe("'s children", function () {

            var grandchildren = undefined;
            beforeEach(function () {

                grandchildren = adapter.getChildren(children[0]);
            });

            it('finds the name of the custom component as a grandchild of the main component', function () {
                expect(adapter.getName(grandchildren[0]), 'to equal', 'Simple');
            });

            it('finds the attributes of the custom component as a grandchild of the main component', function () {
                expect(adapter.getAttributes(grandchildren[0]), 'to equal', {
                    id: '1',
                    text: 'one'
                });
                expect(adapter.getAttributes(grandchildren[1]), 'to equal', {
                    id: '2',
                    text: 'two'
                });
            });

            describe('rendered children of rendered custom component', function () {

                var greatgrandchildren = undefined;
                var greatgrandchildren2 = undefined;

                beforeEach(function () {

                    greatgrandchildren = adapter.getChildren(grandchildren[0]);
                    greatgrandchildren2 = adapter.getChildren(grandchildren[1]);
                });

                it('finds the name of the greatgrandchildren', function () {

                    expect(adapter.getName(greatgrandchildren[0]), 'to equal', 'span');
                    expect(adapter.getName(greatgrandchildren2[0]), 'to equal', 'span');
                });

                it('finds the attributes of the greatgrandchildren', function () {

                    expect(adapter.getAttributes(greatgrandchildren[0]), 'to equal', { id: '1' });
                    expect(adapter.getAttributes(greatgrandchildren2[0]), 'to equal', { id: '2' });
                });

                it('returns the text content of the greatgrandchildren', function () {

                    expect(adapter.getChildren(greatgrandchildren[0]), 'to equal', ['one']);
                    expect(adapter.getChildren(greatgrandchildren2[0]), 'to equal', ['two']);
                });
            });
        });
    });

    describe('text content', function () {

        var SingleContentComponent = undefined,
            DualContentComponent = undefined,
            MultiContentComponent = undefined,
            MixedContentComponent = undefined;
        beforeEach(function () {

            MultiContentComponent = (function (_React$Component3) {
                _inherits(MultiContentComponent, _React$Component3);

                function MultiContentComponent() {
                    _classCallCheck(this, MultiContentComponent);

                    _get(Object.getPrototypeOf(MultiContentComponent.prototype), 'constructor', this).apply(this, arguments);
                }

                _createClass(MultiContentComponent, [{
                    key: 'render',
                    value: function render() {

                        return _react2['default'].createElement(
                            'button',
                            null,
                            'Button clicked ',
                            this.props.count,
                            ' times'
                        );
                    }
                }]);

                return MultiContentComponent;
            })(_react2['default'].Component);

            SingleContentComponent = (function (_React$Component4) {
                _inherits(SingleContentComponent, _React$Component4);

                function SingleContentComponent() {
                    _classCallCheck(this, SingleContentComponent);

                    _get(Object.getPrototypeOf(SingleContentComponent.prototype), 'constructor', this).apply(this, arguments);
                }

                _createClass(SingleContentComponent, [{
                    key: 'render',
                    value: function render() {
                        return _react2['default'].createElement(
                            'div',
                            null,
                            this.props.content
                        );
                    }
                }]);

                return SingleContentComponent;
            })(_react2['default'].Component);

            DualContentComponent = (function (_React$Component5) {
                _inherits(DualContentComponent, _React$Component5);

                function DualContentComponent() {
                    _classCallCheck(this, DualContentComponent);

                    _get(Object.getPrototypeOf(DualContentComponent.prototype), 'constructor', this).apply(this, arguments);
                }

                _createClass(DualContentComponent, [{
                    key: 'render',
                    value: function render() {
                        return _react2['default'].createElement(
                            'div',
                            null,
                            this.props.content1,
                            this.props.content2
                        );
                    }
                }]);

                return DualContentComponent;
            })(_react2['default'].Component);

            MixedContentComponent = (function (_React$Component6) {
                _inherits(MixedContentComponent, _React$Component6);

                function MixedContentComponent() {
                    _classCallCheck(this, MixedContentComponent);

                    _get(Object.getPrototypeOf(MixedContentComponent.prototype), 'constructor', this).apply(this, arguments);
                }

                _createClass(MixedContentComponent, [{
                    key: 'render',
                    value: function render() {
                        return _react2['default'].createElement(
                            'div',
                            null,
                            this.props.content1,
                            _react2['default'].createElement(
                                'span',
                                null,
                                'centre'
                            ),
                            this.props.content2
                        );
                    }
                }]);

                return MixedContentComponent;
            })(_react2['default'].Component);

            var renderedComponent = _reactDomTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(MultiContentComponent, { count: 10 }));
            component = _reactRenderHook2['default'].findComponent(renderedComponent);
        });

        it('renders the text individually', function () {
            var button = adapter.getChildren(component)[0];
            var children = adapter.getChildren(button);
            expect(children, 'to equal', ['Button clicked ', '10', ' times']);
        });

        it('concatenates the text when concatTextContent option is set', function () {

            adapter.setOptions({ concatTextContent: true });
            var button = adapter.getChildren(component)[0];
            var children = adapter.getChildren(button);
            expect(children, 'to equal', ['Button clicked 10 times']);
        });

        it('ignores content with null ', function () {

            var renderedComponent = _reactDomTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(MultiContentComponent, { count: null }));
            component = _reactRenderHook2['default'].findComponent(renderedComponent);
            var button = adapter.getChildren(component)[0];
            var children = adapter.getChildren(button);
            expect(children, 'to equal', ['Button clicked ', ' times']);
        });

        it('concatenates content with null when concatTextContent is true', function () {

            var renderedComponent = _reactDomTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(MultiContentComponent, { count: null }));
            component = _reactRenderHook2['default'].findComponent(renderedComponent);
            adapter.setOptions({ concatTextContent: true });
            var button = adapter.getChildren(component)[0];
            var children = adapter.getChildren(button);
            expect(children, 'to equal', ['Button clicked  times']);
        });

        it('returns a single content item as the original type', function () {

            var component = _reactRenderHook2['default'].findComponent(_reactDomTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(SingleContentComponent, { content: 42 })));

            var theDiv = adapter.getChildren(component)[0];
            expect(adapter.getChildren(theDiv), 'to satisfy', ['42']);
        });

        it('returns a single content item as a string when using `convertToString:true`', function () {

            var component = _reactRenderHook2['default'].findComponent(_reactDomTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(SingleContentComponent, { content: 42 })));
            adapter.setOptions({ convertToString: true });
            var theDiv = adapter.getChildren(component)[0];
            expect(adapter.getChildren(theDiv), 'to satisfy', ['42']);
        });

        it('returns the two content items as strings', function () {

            var component = _reactRenderHook2['default'].findComponent(_reactDomTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(DualContentComponent, { content1: 42, content2: 43 })));

            var theDiv = adapter.getChildren(component)[0];
            expect(adapter.getChildren(theDiv), 'to satisfy', ['42', '43']);
        });

        it('returns the 2 content items in mixed children as strings', function () {

            var instance = _reactDomTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(MixedContentComponent, { content1: 42, content2: 43 }));
            var component = _reactRenderHook2['default'].findComponent(instance);

            var theDiv = adapter.getChildren(component)[0];
            expect(adapter.getChildren(theDiv), 'to satisfy', ['42', expect.it('to be an', 'object'), '43']);
        });

        it('has the correct classAttributeName property', function () {

            expect(adapter.classAttributeName, 'to equal', 'className');
        });

        it('returns numerical content as a string when convertToString is true', function () {
            var TestComponent = (function (_React$Component7) {
                _inherits(TestComponent, _React$Component7);

                function TestComponent() {
                    _classCallCheck(this, TestComponent);

                    _get(Object.getPrototypeOf(TestComponent.prototype), 'constructor', this).apply(this, arguments);
                }

                _createClass(TestComponent, [{
                    key: 'render',
                    value: function render() {
                        return _react2['default'].createElement(
                            'div',
                            null,
                            42
                        );
                    }
                }]);

                return TestComponent;
            })(_react2['default'].Component);

            var component = _reactRenderHook2['default'].findComponent(_reactDomTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(TestComponent, null)));
            var theDiv = adapter.getChildren(component)[0];
            adapter.setOptions({ convertToString: true });
            expect(adapter.getChildren(theDiv), 'to satisfy', ['42']);
        });

        it('returns concatenates numerical content when convertToString and concatTextContent is true', function () {
            var TestComponent = (function (_React$Component8) {
                _inherits(TestComponent, _React$Component8);

                function TestComponent() {
                    _classCallCheck(this, TestComponent);

                    _get(Object.getPrototypeOf(TestComponent.prototype), 'constructor', this).apply(this, arguments);
                }

                _createClass(TestComponent, [{
                    key: 'render',
                    value: function render() {
                        return _react2['default'].createElement(
                            'div',
                            null,
                            4,
                            2
                        );
                    }
                }]);

                return TestComponent;
            })(_react2['default'].Component);

            var component = _reactRenderHook2['default'].findComponent(_reactDomTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(TestComponent, null)));
            var theDiv = adapter.getChildren(component)[0];
            adapter.setOptions({ convertToString: true, concatTextContent: true });
            expect(adapter.getChildren(theDiv), 'to satisfy', ['42']);
        });

        it('ignores null content with numerical children when concatenating', function () {
            var TestComponent = (function (_React$Component9) {
                _inherits(TestComponent, _React$Component9);

                function TestComponent() {
                    _classCallCheck(this, TestComponent);

                    _get(Object.getPrototypeOf(TestComponent.prototype), 'constructor', this).apply(this, arguments);
                }

                _createClass(TestComponent, [{
                    key: 'render',
                    value: function render() {
                        return _react2['default'].createElement(
                            'div',
                            null,
                            4,
                            null
                        );
                    }
                }]);

                return TestComponent;
            })(_react2['default'].Component);

            ;

            var component = _reactRenderHook2['default'].findComponent(_reactDomTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(TestComponent, null)));
            var theDiv = adapter.getChildren(component)[0];
            adapter.setOptions({ convertToString: true, concatTextContent: true });
            expect(adapter.getChildren(theDiv), 'to satisfy', ['4']);
        });

        it('ignores null content with numerical children when not concatenating', function () {
            var TestComponent = (function (_React$Component10) {
                _inherits(TestComponent, _React$Component10);

                function TestComponent() {
                    _classCallCheck(this, TestComponent);

                    _get(Object.getPrototypeOf(TestComponent.prototype), 'constructor', this).apply(this, arguments);
                }

                _createClass(TestComponent, [{
                    key: 'render',
                    value: function render() {
                        return _react2['default'].createElement(
                            'div',
                            null,
                            4,
                            null
                        );
                    }
                }]);

                return TestComponent;
            })(_react2['default'].Component);

            ;

            var component = _reactRenderHook2['default'].findComponent(_reactDomTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(TestComponent, null)));
            var theDiv = adapter.getChildren(component)[0];
            adapter.setOptions({ convertToString: true });
            expect(adapter.getChildren(theDiv), 'to satisfy', ['4']);
        });

        it('treats a zero as a normal number', function () {
            var TestComponent = (function (_React$Component11) {
                _inherits(TestComponent, _React$Component11);

                function TestComponent() {
                    _classCallCheck(this, TestComponent);

                    _get(Object.getPrototypeOf(TestComponent.prototype), 'constructor', this).apply(this, arguments);
                }

                _createClass(TestComponent, [{
                    key: 'render',
                    value: function render() {
                        return _react2['default'].createElement(
                            'div',
                            null,
                            'Hello ',
                            0
                        );
                    }
                }]);

                return TestComponent;
            })(_react2['default'].Component);

            var component = _reactRenderHook2['default'].findComponent(_reactDomTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(TestComponent, null)));
            var theDiv = adapter.getChildren(component)[0];
            adapter.setOptions({ convertToString: true });
            expect(adapter.getChildren(theDiv), 'to satisfy', ['Hello ', '0']);
        });
    });

    describe('with fragments', function () {
        var TestComponent = (function (_React$Component12) {
            _inherits(TestComponent, _React$Component12);

            function TestComponent() {
                _classCallCheck(this, TestComponent);

                _get(Object.getPrototypeOf(TestComponent.prototype), 'constructor', this).apply(this, arguments);
            }

            _createClass(TestComponent, [{
                key: 'render',
                value: function render() {
                    var children = _react2['default'].createElement(
                        _react2['default'].Fragment,
                        null,
                        _react2['default'].createElement(
                            'li',
                            null,
                            'one'
                        ),
                        _react2['default'].createElement(
                            'li',
                            null,
                            'two'
                        )
                    );

                    if (this.props.includeEnd) {
                        children = [children, _react2['default'].createElement(
                            'li',
                            null,
                            'End'
                        )];
                    }
                    return _react2['default'].createElement(
                        'ol',
                        null,
                        children
                    );
                }
            }]);

            return TestComponent;
        })(_react2['default'].Component);

        it('renders a fragment', function () {

            var component = _reactRenderHook2['default'].findComponent(_reactDomTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(TestComponent, null)));
            var olChildren = adapter.getChildren(component)[0];
            expect(adapter.getName(adapter.getChildren(olChildren)[0]), 'to equal', 'li');
            expect(adapter.getName(adapter.getChildren(olChildren)[1]), 'to equal', 'li');
            expect(adapter.getChildren(olChildren), 'to have length', 2);
        });

        it('renders a fragment with an extra sibling of the fragment', function () {
            var component = _reactRenderHook2['default'].findComponent(_reactDomTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(TestComponent, { includeEnd: true })));
            var olChildren = adapter.getChildren(component)[0];
            expect(adapter.getName(adapter.getChildren(olChildren)[0]), 'to equal', 'li');
            expect(adapter.getName(adapter.getChildren(olChildren)[1]), 'to equal', 'li');
            expect(adapter.getName(adapter.getChildren(olChildren)[2]), 'to equal', 'li');
            expect(adapter.getChildren(adapter.getChildren(olChildren)[2]), 'to equal', ['End']);
            expect(adapter.getChildren(olChildren), 'to have length', 3);
        });
    });
});
//# sourceMappingURL=RenderedReactElementAdapter.spec.js.map